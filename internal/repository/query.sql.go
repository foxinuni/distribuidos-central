// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repository

import (
	"context"
)

const allocateClassrooms = `-- name: AllocateClassrooms :exec
CALL allocate_classrooms($1, $2, $3, $4)
`

type AllocateClassroomsParams struct {
	Semester string `db:"semester" json:"semester"`
	Faculty  string `db:"faculty" json:"faculty"`
	Program  string `db:"program" json:"program"`
	Count    int32  `db:"count" json:"count"`
}

func (q *Queries) AllocateClassrooms(ctx context.Context, arg AllocateClassroomsParams) error {
	_, err := q.db.Exec(ctx, allocateClassrooms,
		arg.Semester,
		arg.Faculty,
		arg.Program,
		arg.Count,
	)
	return err
}

const allocateLaboratories = `-- name: AllocateLaboratories :exec
CALL allocate_laboratories($1, $2, $3, $4)
`

type AllocateLaboratoriesParams struct {
	Semester string `db:"semester" json:"semester"`
	Faculty  string `db:"faculty" json:"faculty"`
	Program  string `db:"program" json:"program"`
	Count    int32  `db:"count" json:"count"`
}

func (q *Queries) AllocateLaboratories(ctx context.Context, arg AllocateLaboratoriesParams) error {
	_, err := q.db.Exec(ctx, allocateLaboratories,
		arg.Semester,
		arg.Faculty,
		arg.Program,
		arg.Count,
	)
	return err
}

const generateRooms = `-- name: GenerateRooms :exec
CALL generate_rooms($1, $2)
`

type GenerateRoomsParams struct {
	NormalRooms  int32 `db:"normal_rooms" json:"normal_rooms"`
	Laboratories int32 `db:"laboratories" json:"laboratories"`
}

func (q *Queries) GenerateRooms(ctx context.Context, arg GenerateRoomsParams) error {
	_, err := q.db.Exec(ctx, generateRooms, arg.NormalRooms, arg.Laboratories)
	return err
}

const getRoomsByFacultyProgramSemester = `-- name: GetRoomsByFacultyProgramSemester :many
SELECT r.id, r.name, r.type, ra.adapted
FROM rooms r
JOIN room_allocations ra
    ON r.id = ra.room_id
WHERE ra.faculty = $1
    AND ra.program = $2
    AND ra.semester = $3
`

type GetRoomsByFacultyProgramSemesterParams struct {
	Faculty  string `db:"faculty" json:"faculty"`
	Program  string `db:"program" json:"program"`
	Semester string `db:"semester" json:"semester"`
}

type GetRoomsByFacultyProgramSemesterRow struct {
	ID      int32    `db:"id" json:"id"`
	Name    string   `db:"name" json:"name"`
	Type    RoomType `db:"type" json:"type"`
	Adapted bool     `db:"adapted" json:"adapted"`
}

func (q *Queries) GetRoomsByFacultyProgramSemester(ctx context.Context, arg GetRoomsByFacultyProgramSemesterParams) ([]GetRoomsByFacultyProgramSemesterRow, error) {
	rows, err := q.db.Query(ctx, getRoomsByFacultyProgramSemester, arg.Faculty, arg.Program, arg.Semester)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetRoomsByFacultyProgramSemesterRow
	for rows.Next() {
		var i GetRoomsByFacultyProgramSemesterRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Adapted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const lockRooms = `-- name: LockRooms :exec
CALL lock_rooms($1, $2)
`

type LockRoomsParams struct {
	FacultyName  string `db:"faculty_name" json:"faculty_name"`
	SemesterName string `db:"semester_name" json:"semester_name"`
}

func (q *Queries) LockRooms(ctx context.Context, arg LockRoomsParams) error {
	_, err := q.db.Exec(ctx, lockRooms, arg.FacultyName, arg.SemesterName)
	return err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"database/sql/driver"
	"fmt"
)

type RoomState string

const (
	RoomStateAwaiting RoomState = "awaiting"
	RoomStateLocked   RoomState = "locked"
)

func (e *RoomState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RoomState(s)
	case string:
		*e = RoomState(s)
	default:
		return fmt.Errorf("unsupported scan type for RoomState: %T", src)
	}
	return nil
}

type NullRoomState struct {
	RoomState RoomState `json:"room_state"`
	Valid     bool      `json:"valid"` // Valid is true if RoomState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoomState) Scan(value interface{}) error {
	if value == nil {
		ns.RoomState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RoomState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoomState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RoomState), nil
}

type RoomType string

const (
	RoomTypeClassroom  RoomType = "classroom"
	RoomTypeLaboratory RoomType = "laboratory"
)

func (e *RoomType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RoomType(s)
	case string:
		*e = RoomType(s)
	default:
		return fmt.Errorf("unsupported scan type for RoomType: %T", src)
	}
	return nil
}

type NullRoomType struct {
	RoomType RoomType `json:"room_type"`
	Valid    bool     `json:"valid"` // Valid is true if RoomType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoomType) Scan(value interface{}) error {
	if value == nil {
		ns.RoomType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RoomType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoomType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RoomType), nil
}

type Room struct {
	ID   int32    `db:"id" json:"id"`
	Name string   `db:"name" json:"name"`
	Type RoomType `db:"type" json:"type"`
}

type RoomAllocation struct {
	ID       int32     `db:"id" json:"id"`
	State    RoomState `db:"state" json:"state"`
	RoomID   int32     `db:"room_id" json:"room_id"`
	Semester string    `db:"semester" json:"semester"`
	Faculty  string    `db:"faculty" json:"faculty"`
	Program  string    `db:"program" json:"program"`
	Adapted  bool      `db:"adapted" json:"adapted"`
}
